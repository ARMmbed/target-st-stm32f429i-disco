/* Linker script to configure memory regions. */
MEMORY
{
  VECTORS (rx)          : ORIGIN = 0x08000000, LENGTH = 0x00000400
  FLASH (rx)            : ORIGIN = 0x08000400, LENGTH = 2048k - 0x400
  CCM (rwx)             : ORIGIN = 0x10000000, LENGTH = 64K
  RAM (rwx)             : ORIGIN = 0x200001AC, LENGTH = 192k - 0x1AC
}

/* Linker script to place sections and symbol values. Should be used together
 * with other linker script that defines memory regions FLASH and RAM.
 * It references following symbols, which must be defined in code:
 *   Reset_Handler : Entry of reset handler
 *
 * It defines following symbols, which code can use without definition:
 *   __exidx_start
 *   __exidx_end
 *   __etext
 *   __data_start__
 *   __preinit_array_start
 *   __preinit_array_end
 *   __init_array_start
 *   __init_array_end
 *   __fini_array_start
 *   __fini_array_end
 *   __data_end__
 *   __bss_start__
 *   __bss_end__
 *   __end__
 *   end
 *   __HeapLimit
 *   __StackLimit
 *   __StackTop
 *   __stack
 *   _estack
 */
ENTRY(Reset_Handler)

SECTIONS
{
    .isr_vector :
    {
        __vector_table = .;
        KEEP(*(.isr_vector))
         . = ALIGN(4);
    } > VECTORS
    /* ensure that uvisor bss is at the beginning of memory */
    .uvisor.bss (NOLOAD):
    {
        /* protected uvisor SRAM starts here */
        KEEP(*(.uvisor.bss.main))
        KEEP(*(.uvisor.bss.stack))
        __uvisor_bss_start = .;
        *(.uvisor.bss*)
        __uvisor_bss_end = .;
    } > RAM

    .uvisor.data : AT(__uvisor_cfgtbl_end)
    {
        __uvisor_data_src = LOADADDR(.uvisor.data);

        . = ALIGN(32);
        __uvisor_data_start = .;
        *(.uvisor.data)
        . = ALIGN(32);
        __uvisor_data_end = .;
    } >RAM

    .text :
    {
        /* uVisor code and data */
        *(.uvisor.main)

        *(.text*)

        KEEP(*(.init))
        KEEP(*(.fini))

        /* .ctors */
        *crtbegin.o(.ctors)
        *crtbegin?.o(.ctors)
        *(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)
        *(SORT(.ctors.*))
        *(.ctors)

        /* .dtors */
        *crtbegin.o(.dtors)
        *crtbegin?.o(.dtors)
        *(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)
        *(SORT(.dtors.*))
        *(.dtors)

        *(.rodata*)

        KEEP(*(.eh_frame*))
    } > FLASH

    .ARM.extab :
    {
        *(.ARM.extab* .gnu.linkonce.armextab.*)
    } > FLASH

    __exidx_start = .;

    .ARM.exidx :
    {
        *(.ARM.exidx* .gnu.linkonce.armexidx.*)
    } > FLASH
    __exidx_end = .;

    __etext = .;
    _sidata = .;

    /* .stack section doesn't contains any symbols. It is only
     * used for linker to reserve space for the main stack section
     * WARNING: .stack should come immediately after the last secure memory
     * section.  This provides stack overflow detection. */
    .stack (NOLOAD):
    {
        __StackLimit = .;
        *(.stack*);
        . += 0x8000 - (. - __StackLimit);
    } > RAM

    /* Set stack top to end of RAM, and stack limit move down by
     * size of stack_dummy section */
    __StackTop = LOADADDR(.stack) + SIZEOF(.stack);
    __StackLimit = LOADADDR(.stack);
    PROVIDE(__stack = __StackTop);

    .data :
    {
        PROVIDE( __etext = LOADADDR(.data) );

        __data_start__ = .;
        _sdata = .;
        *(vtable)
        *(.data*)

        . = ALIGN(4);
        /* preinit data */
        PROVIDE_HIDDEN (__preinit_array_start = .);
        KEEP(*(.preinit_array))
        PROVIDE_HIDDEN (__preinit_array_end = .);

        . = ALIGN(4);
        /* init data */
        PROVIDE_HIDDEN (__init_array_start = .);
        KEEP(*(SORT(.init_array.*)))
        KEEP(*(.init_array))
        PROVIDE_HIDDEN (__init_array_end = .);


        . = ALIGN(4);
        /* finit data */
        PROVIDE_HIDDEN (__fini_array_start = .);
        KEEP(*(SORT(.fini_array.*)))
        KEEP(*(.fini_array))
        PROVIDE_HIDDEN (__fini_array_end = .);

        KEEP(*(.jcr*))
        . = ALIGN(4);
        /* All data end */
        __data_end__ = .;
        _edata = .;

    } > RAM AT>FLASH

    /* put uvisor data flash section at the end of flash */
    .uvisor.secure :
    {
        . = ALIGN(32);
        __uvisor_secure_start = .;
        KEEP(*(.uvisor.secure.keep))
        *(.uvisor.secure)
        . = ALIGN(32);

        __uvisor_cfgtbl_start = .;
        KEEP(*(.uvisor.cfgtbl_first*))
        KEEP(*(.uvisor.cfgtbl*))
        __uvisor_cfgtbl_end = .;
    } >FLASH

    .uvisor.end (NOLOAD): AT( LOADADDR(.uvisor.data) + SIZEOF(.uvisor.data) )
    {
        . = ALIGN(1024);
        __uvisor_secure_end = .;
    } >FLASH

    .bss (NOLOAD):
    {
        . = ALIGN(4);
        __bss_start__ = .;
        _sbss = .;
        *(.bss*)
        *(COMMON)
        . = ALIGN(4);
        __bss_end__ = .;
        _ebss = .;
    } > RAM

    .heap (NOLOAD):
    {
        __end__ = .;
        end = __end__;
        *(.heap*);
        . += (ORIGIN(RAM) + LENGTH(RAM) - .);
        __HeapLimit = .;
    } > RAM
    PROVIDE(__heap_size = SIZEOF(.heap));
    PROVIDE(__mbed_sbrk_start = LOADADDR(.heap));
    PROVIDE(__mbed_krbs_start = LOADADDR(.heap) + SIZEOF(.heap));
}
